STARTING WORK ON OUR ACTUAL APP WITH GRAILS
CREATING THE DOMAIN AND VERIFYING WITH DBCONSOLE

1) idea for application: car dealership named "Carworks"
  a) let's brainstorm a conceptual domain model really quick
    CAR
      make
      model
      year
      trim
      mileage
      price (sticker/msrp)
      *status (*phase 2)
    MAKE
      Chevrolet
      Subaru
    MODEL
      corvette (chevrolet)
      camaro (chevrolet)
      forester (subaru)
    TRIM
      convertible (corvette)
      coupe (corvette)
      z51 coupe (corvette)
      limited (forester)
      XT (forester)
    ----- that is enough to get started; here is something for phase 2 ----
    STATUS
      ordered
      inventory
      sold
    SALE
      car
      customer
    ORDER
      car
      customer
    CUSTOMER
      first name
      last name

  b) what would be some flows for the application (phase 1 - inventory, phase 2 - sale)
    add new car (for existing model, make, etc)
    add new model/make/trim
    remove existing car/model/make/trim
    edit existing car/model/make/trim
    (note: not doing anything to freeform things like year, price)
    

2) start with creation of the domain -- just a Make class for now
  a) grails create-domain-class com.careworkstech.carworks.Make
    i) might need to talk about ORM in general for a little bit and about Hibernate
    ii) talk about GORM and default configuration (table name, id, version, etc)
    iii) talk about overrides -- mapping, constraints, validation
  b) call attention to DataSource.groovy and the setup there
  c) create some fields -- note that groovy has optional static typing
    i) static typing makes sense for domain classes and IDE assistance
    ii) fields: name ... that's it
  d) delete MakeSpec; we'll worry about specs later

3) run-app again (need to restart when modifying domain)
  a) go to localhost:8080/carworks/dbconsole and log in (user 'sa', no password)
  b) look at CAR table and notice 2 additional columns: ID and VERSION
    i) version is useful; can be eliminated with static mapping = { version false }
    ii) version allows for optimistic locking (vs pessimistic) by Hibernate; performant

4) create another domain class - Model
  a) grails create-domain-class com.careworkstech.carworks.Model
  b) this one will need 2 fields - String name and Make make
  c) this is a many-to-one relationship (many models for one make)
    i) can be represented in multiple ways. belongsTo, hasMany, etc.

5) lots of ways to configure domain if you cannot follow convention
  a) static mapping = {
       table: car_model
       id column: car_model_id
     }

6) let's finish up the domain
  a) grails create-domain-class com.careworkstech.carworks.Trim
    i) String name, Model model
  b) grails create-domain-class com.careworkstech.carworks.Car
    i) Model model, Trim trim, Year year, Integer mileage, BigDecimal price
    ii) static constraints = { trim nullable: true } 
    ii) why not just Trim since we can go trim -> model -> make?
        because some models don't have a trim. but we can go model -> make no problem

7) delete the auto-generated specs for now....

--THAT'S IT FOR SNAPSHOT 1--